package com.vertex.quality.connectors.oraclecloud.pages;

import com.vertex.quality.common.enums.VertexLogLevel;
import com.vertex.quality.common.utils.VertexLogger;
import com.vertex.quality.connectors.oraclecloud.enums.OracleCloudPoPagesFieldData;
import com.vertex.quality.connectors.oraclecloud.pages.base.OracleCloudBasePage;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

/**
 * ERP section for managing Purchase Orders within
 * the procurement area of Oracle.
 *
 * @author msalomone
 */
public class OracleCloudManagePurchaseOrdersPage extends OracleCloudBasePage {

    protected By blockingPlane = By.className("AFBlockingGlassPane");

    // Manage Orders Search Criteria
    By searchButtonLoc = By.cssSelector("button[id$='q1::search']");
    By headerLoc = By.cssSelector("td[id*='SPph::_afrTtxt']");

    // Search Results Items
    By resultsLoc = By.cssSelector("tr[_afrrk='0']");
    By duplicateIconLoc = By.cssSelector("img[id$='duplicate::icon']");

    // Manage Orders buttons
    By saveButtonLoc = By.xpath("//span[text()='Save']");
    By submitButtonLoc = By.xpath("//span[text()='Sub']");
    By saveConfirmationLoc = By.xpath("//span[text()='Last Saved']");
    By submitConfirmationLoc = By.xpath("//div[text()='Confirmation']");

    // Submission confirmation popup text
    By submitConTextLoc = By.xpath("//div[text()[contains(.,'was submitted for approval.')]]");

    public OracleCloudManagePurchaseOrdersPage( WebDriver driver ) { super(driver); }

    /**
     * Writes to a general information field and tabs to the next field
     *
     * @param data  enum containing field information
     * @param input input to write
     *
     * @return WebElement of field interacted with
     */
    public WebElement inputAndTab(OracleCloudPoPagesFieldData data, String input )
    {
        WebElement field = writeToGeneralField(data, input);
        text.pressTab(field);

        return field;
    }

    /**
     *	Writes to a field located on the manage (purchase) orders page.
     *
     * @param data enum containing field information
     * @param inputToField input to write
     * @return WebElement of field interacted with
     */
    public WebElement writeToGeneralField( OracleCloudPoPagesFieldData data, String inputToField )
    {
        wait.waitForElementNotEnabled(blockingPlane);

        By loc = data.getLocator();
        WebElement inputField = wait.waitForElementEnabled(loc);

        inputField.sendKeys(inputToField);

        inputField = wait.waitForElementEnabled(loc);

        return inputField;
    }

    /**
     * Clicks the Search button element on the
     * manage (purchase) orders page.
     */
    public void clickSearchButton() {
        WebElement button = wait.waitForElementEnabled(searchButtonLoc);

        click.clickElementCarefully(button);
        wait.waitForElementDisplayed(resultsLoc); //The first search result.
    }

    /**
     * Clicks the duplicate icon for searched
     * order results.
     */
    public void duplicateOrder() {
        String expectedHeader = "Edit Document";

        WebElement button = wait.waitForElementEnabled(duplicateIconLoc);

        click.clickElementCarefully(button);
        waitForLoadedPage(expectedHeader);
    }

    /**
     * Clicks the "Save" button on the manage purchase orders
     * page. Does not click button's dropdown.
     */
    public void clickSaveOrder() {
        String text = "Save";

        scroll.scrollElementIntoView(saveButtonLoc);

        WebElement select = element.selectElementByText(saveButtonLoc, text);
        wait.waitForElementEnabled(select);
        click.clickElementCarefully(select);
        wait.waitForElementDisplayed(saveConfirmationLoc);
    }

    /**
     * Clicks the "Submit" button on the manage purchase orders
     * page. Does not click button's dropdown.
     */
    public void clickSubmitOrder() {
        String text = "Submit";

        scroll.scrollElementIntoView(submitButtonLoc);

        WebElement select = element.selectElementByText(submitButtonLoc, text);
        wait.waitForElementEnabled(select);
        click.clickElementCarefully(select);
        wait.waitForElementDisplayed(submitConfirmationLoc);
    }

    /**
     * Get the Purchase Order Number generated by Oracle
     *
     * @return the Purchase Order number
     */
    public String getPurchaseOrderNumber( )
    {
        scroll.scrollElementIntoView(headerLoc);
        WebElement transNum = wait.waitForElementDisplayed(headerLoc);
        String number = transNum.getText();
        number = number.replaceAll("[^\\d.]", "");

        return number;
    }

    /**
     * Locates the submission confirmation popup box's
     * text. Verifies an order was submitted for approval
     * successfully by checking for key words.
     *
     * @return textMatches - whether the text contained within
     * the confirmation popup box matches the expected text.
     */
    public boolean verifySubConfirmation() {
        boolean textMatches = false;

        try {
            wait.waitForElementDisplayed(submitConTextLoc);
            textMatches = true;
        } catch (Exception e) {
            VertexLogger.log("Could not find confirmation that PO was submitted for approval.",
                    VertexLogLevel.ERROR);
        }

        return textMatches;
    }
}
